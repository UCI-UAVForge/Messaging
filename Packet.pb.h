// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef PROTOBUF_Packet_2eproto__INCLUDED
#define PROTOBUF_Packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AckPacket.pb.h"
#include "TelemetryPacket.pb.h"
#include "ActionPacket.pb.h"
#include "InfoPacket.pb.h"
// @@protoc_insertion_point(includes)

namespace uavforge {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_2eproto();
void protobuf_AssignDesc_Packet_2eproto();
void protobuf_ShutdownFile_Packet_2eproto();

class Packet;

enum Packet_MessageType {
  Packet_MessageType_ACK = 0,
  Packet_MessageType_TELEM = 1,
  Packet_MessageType_ACTION = 2,
  Packet_MessageType_UPDATE = 3,
  Packet_MessageType_INFO = 4
};
bool Packet_MessageType_IsValid(int value);
const Packet_MessageType Packet_MessageType_MessageType_MIN = Packet_MessageType_ACK;
const Packet_MessageType Packet_MessageType_MessageType_MAX = Packet_MessageType_INFO;
const int Packet_MessageType_MessageType_ARRAYSIZE = Packet_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Packet_MessageType_descriptor();
inline const ::std::string& Packet_MessageType_Name(Packet_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Packet_MessageType_descriptor(), value);
}
inline bool Packet_MessageType_Parse(
    const ::std::string& name, Packet_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Packet_MessageType>(
    Packet_MessageType_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  enum ContentsCase {
    kTelem = 5,
    kComm = 6,
    kInfo = 8,
    kAck = 9,
    CONTENTS_NOT_SET = 0,
  };

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Packet_MessageType MessageType;
  static const MessageType ACK = Packet_MessageType_ACK;
  static const MessageType TELEM = Packet_MessageType_TELEM;
  static const MessageType ACTION = Packet_MessageType_ACTION;
  static const MessageType UPDATE = Packet_MessageType_UPDATE;
  static const MessageType INFO = Packet_MessageType_INFO;
  static inline bool MessageType_IsValid(int value) {
    return Packet_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Packet_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Packet_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Packet_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Packet_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Packet_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Packet_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required string target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required .uavforge.Packet.MessageType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::uavforge::Packet_MessageType type() const;
  inline void set_type(::uavforge::Packet_MessageType value);

  // optional .uavforge.TelemetryPacket telem = 5;
  inline bool has_telem() const;
  inline void clear_telem();
  static const int kTelemFieldNumber = 5;
  inline const ::uavforge::TelemetryPacket& telem() const;
  inline ::uavforge::TelemetryPacket* mutable_telem();
  inline ::uavforge::TelemetryPacket* release_telem();
  inline void set_allocated_telem(::uavforge::TelemetryPacket* telem);

  // optional .uavforge.ActionPacket comm = 6;
  inline bool has_comm() const;
  inline void clear_comm();
  static const int kCommFieldNumber = 6;
  inline const ::uavforge::ActionPacket& comm() const;
  inline ::uavforge::ActionPacket* mutable_comm();
  inline ::uavforge::ActionPacket* release_comm();
  inline void set_allocated_comm(::uavforge::ActionPacket* comm);

  // optional .uavforge.InfoPacket info = 8;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 8;
  inline const ::uavforge::InfoPacket& info() const;
  inline ::uavforge::InfoPacket* mutable_info();
  inline ::uavforge::InfoPacket* release_info();
  inline void set_allocated_info(::uavforge::InfoPacket* info);

  // optional .uavforge.AckPacket ack = 9;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 9;
  inline const ::uavforge::AckPacket& ack() const;
  inline ::uavforge::AckPacket* mutable_ack();
  inline ::uavforge::AckPacket* release_ack();
  inline void set_allocated_ack(::uavforge::AckPacket* ack);

  inline ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:uavforge.Packet)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_telem();
  inline void set_has_comm();
  inline void set_has_info();
  inline void set_has_ack();

  inline bool has_contents();
  void clear_contents();
  inline void clear_has_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* sender_;
  ::std::string* target_;
  int type_;
  union ContentsUnion {
    ::uavforge::TelemetryPacket* telem_;
    ::uavforge::ActionPacket* comm_;
    ::uavforge::InfoPacket* info_;
    ::uavforge::AckPacket* ack_;
  } contents_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_Packet_2eproto();
  friend void protobuf_AssignDesc_Packet_2eproto();
  friend void protobuf_ShutdownFile_Packet_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet

// required uint64 timestamp = 1;
inline bool Packet::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Packet::timestamp() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.timestamp)
  return timestamp_;
}
inline void Packet::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:uavforge.Packet.timestamp)
}

// required string sender = 2;
inline bool Packet::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& Packet::sender() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.sender)
  return *sender_;
}
inline void Packet::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:uavforge.Packet.sender)
}
inline void Packet::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:uavforge.Packet.sender)
}
inline void Packet::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uavforge.Packet.sender)
}
inline ::std::string* Packet::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:uavforge.Packet.sender)
  return sender_;
}
inline ::std::string* Packet::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Packet::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:uavforge.Packet.sender)
}

// required string target = 3;
inline bool Packet::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_target() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& Packet::target() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.target)
  return *target_;
}
inline void Packet::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set:uavforge.Packet.target)
}
inline void Packet::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set_char:uavforge.Packet.target)
}
inline void Packet::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uavforge.Packet.target)
}
inline ::std::string* Packet::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:uavforge.Packet.target)
  return target_;
}
inline ::std::string* Packet::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Packet::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:uavforge.Packet.target)
}

// required .uavforge.Packet.MessageType type = 4;
inline bool Packet::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::uavforge::Packet_MessageType Packet::type() const {
  // @@protoc_insertion_point(field_get:uavforge.Packet.type)
  return static_cast< ::uavforge::Packet_MessageType >(type_);
}
inline void Packet::set_type(::uavforge::Packet_MessageType value) {
  assert(::uavforge::Packet_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:uavforge.Packet.type)
}

// optional .uavforge.TelemetryPacket telem = 5;
inline bool Packet::has_telem() const {
  return contents_case() == kTelem;
}
inline void Packet::set_has_telem() {
  _oneof_case_[0] = kTelem;
}
inline void Packet::clear_telem() {
  if (has_telem()) {
    delete contents_.telem_;
    clear_has_contents();
  }
}
inline const ::uavforge::TelemetryPacket& Packet::telem() const {
  return has_telem() ? *contents_.telem_
                      : ::uavforge::TelemetryPacket::default_instance();
}
inline ::uavforge::TelemetryPacket* Packet::mutable_telem() {
  if (!has_telem()) {
    clear_contents();
    set_has_telem();
    contents_.telem_ = new ::uavforge::TelemetryPacket;
  }
  return contents_.telem_;
}
inline ::uavforge::TelemetryPacket* Packet::release_telem() {
  if (has_telem()) {
    clear_has_contents();
    ::uavforge::TelemetryPacket* temp = contents_.telem_;
    contents_.telem_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_telem(::uavforge::TelemetryPacket* telem) {
  clear_contents();
  if (telem) {
    set_has_telem();
    contents_.telem_ = telem;
  }
}

// optional .uavforge.ActionPacket comm = 6;
inline bool Packet::has_comm() const {
  return contents_case() == kComm;
}
inline void Packet::set_has_comm() {
  _oneof_case_[0] = kComm;
}
inline void Packet::clear_comm() {
  if (has_comm()) {
    delete contents_.comm_;
    clear_has_contents();
  }
}
inline const ::uavforge::ActionPacket& Packet::comm() const {
  return has_comm() ? *contents_.comm_
                      : ::uavforge::ActionPacket::default_instance();
}
inline ::uavforge::ActionPacket* Packet::mutable_comm() {
  if (!has_comm()) {
    clear_contents();
    set_has_comm();
    contents_.comm_ = new ::uavforge::ActionPacket;
  }
  return contents_.comm_;
}
inline ::uavforge::ActionPacket* Packet::release_comm() {
  if (has_comm()) {
    clear_has_contents();
    ::uavforge::ActionPacket* temp = contents_.comm_;
    contents_.comm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_comm(::uavforge::ActionPacket* comm) {
  clear_contents();
  if (comm) {
    set_has_comm();
    contents_.comm_ = comm;
  }
}

// optional .uavforge.InfoPacket info = 8;
inline bool Packet::has_info() const {
  return contents_case() == kInfo;
}
inline void Packet::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void Packet::clear_info() {
  if (has_info()) {
    delete contents_.info_;
    clear_has_contents();
  }
}
inline const ::uavforge::InfoPacket& Packet::info() const {
  return has_info() ? *contents_.info_
                      : ::uavforge::InfoPacket::default_instance();
}
inline ::uavforge::InfoPacket* Packet::mutable_info() {
  if (!has_info()) {
    clear_contents();
    set_has_info();
    contents_.info_ = new ::uavforge::InfoPacket;
  }
  return contents_.info_;
}
inline ::uavforge::InfoPacket* Packet::release_info() {
  if (has_info()) {
    clear_has_contents();
    ::uavforge::InfoPacket* temp = contents_.info_;
    contents_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_info(::uavforge::InfoPacket* info) {
  clear_contents();
  if (info) {
    set_has_info();
    contents_.info_ = info;
  }
}

// optional .uavforge.AckPacket ack = 9;
inline bool Packet::has_ack() const {
  return contents_case() == kAck;
}
inline void Packet::set_has_ack() {
  _oneof_case_[0] = kAck;
}
inline void Packet::clear_ack() {
  if (has_ack()) {
    delete contents_.ack_;
    clear_has_contents();
  }
}
inline const ::uavforge::AckPacket& Packet::ack() const {
  return has_ack() ? *contents_.ack_
                      : ::uavforge::AckPacket::default_instance();
}
inline ::uavforge::AckPacket* Packet::mutable_ack() {
  if (!has_ack()) {
    clear_contents();
    set_has_ack();
    contents_.ack_ = new ::uavforge::AckPacket;
  }
  return contents_.ack_;
}
inline ::uavforge::AckPacket* Packet::release_ack() {
  if (has_ack()) {
    clear_has_contents();
    ::uavforge::AckPacket* temp = contents_.ack_;
    contents_.ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Packet::set_allocated_ack(::uavforge::AckPacket* ack) {
  clear_contents();
  if (ack) {
    set_has_ack();
    contents_.ack_ = ack;
  }
}

inline bool Packet::has_contents() {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void Packet::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline Packet::ContentsCase Packet::contents_case() const {
  return Packet::ContentsCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace uavforge

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::uavforge::Packet_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uavforge::Packet_MessageType>() {
  return ::uavforge::Packet_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_2eproto__INCLUDED
