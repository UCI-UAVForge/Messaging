// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TelemetryPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TelemetryPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uavforge {

namespace {

const ::google::protobuf::Descriptor* TelemetryPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelemetryPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TelemetryPacket_2eproto() {
  protobuf_AddDesc_TelemetryPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TelemetryPacket.proto");
  GOOGLE_CHECK(file != NULL);
  TelemetryPacket_descriptor_ = file->message_type(0);
  static const int TelemetryPacket_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, accx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, accy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, accz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, barometer_),
  };
  TelemetryPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TelemetryPacket_descriptor_,
      TelemetryPacket::default_instance_,
      TelemetryPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TelemetryPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TelemetryPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TelemetryPacket_descriptor_, &TelemetryPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TelemetryPacket_2eproto() {
  delete TelemetryPacket::default_instance_;
  delete TelemetryPacket_reflection_;
}

void protobuf_AddDesc_TelemetryPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025TelemetryPacket.proto\022\010uavforge\"\275\001\n\017Te"
    "lemetryPacket\022\r\n\005seqNo\030\001 \002(\005\022\014\n\004accx\030\002 \002"
    "(\002\022\014\n\004accy\030\003 \002(\002\022\014\n\004accz\030\004 \002(\002\022\r\n\005pitch\030"
    "\005 \002(\002\022\014\n\004roll\030\006 \002(\002\022\013\n\003yaw\030\007 \002(\002\022\013\n\003lat\030"
    "\010 \002(\001\022\013\n\003lng\030\t \002(\001\022\013\n\003alt\030\n \002(\002\022\r\n\005speed"
    "\030\013 \002(\002\022\021\n\tbarometer\030\014 \002(\005", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TelemetryPacket.proto", &protobuf_RegisterTypes);
  TelemetryPacket::default_instance_ = new TelemetryPacket();
  TelemetryPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TelemetryPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TelemetryPacket_2eproto {
  StaticDescriptorInitializer_TelemetryPacket_2eproto() {
    protobuf_AddDesc_TelemetryPacket_2eproto();
  }
} static_descriptor_initializer_TelemetryPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TelemetryPacket::kSeqNoFieldNumber;
const int TelemetryPacket::kAccxFieldNumber;
const int TelemetryPacket::kAccyFieldNumber;
const int TelemetryPacket::kAcczFieldNumber;
const int TelemetryPacket::kPitchFieldNumber;
const int TelemetryPacket::kRollFieldNumber;
const int TelemetryPacket::kYawFieldNumber;
const int TelemetryPacket::kLatFieldNumber;
const int TelemetryPacket::kLngFieldNumber;
const int TelemetryPacket::kAltFieldNumber;
const int TelemetryPacket::kSpeedFieldNumber;
const int TelemetryPacket::kBarometerFieldNumber;
#endif  // !_MSC_VER

TelemetryPacket::TelemetryPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.TelemetryPacket)
}

void TelemetryPacket::InitAsDefaultInstance() {
}

TelemetryPacket::TelemetryPacket(const TelemetryPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.TelemetryPacket)
}

void TelemetryPacket::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0;
  accx_ = 0;
  accy_ = 0;
  accz_ = 0;
  pitch_ = 0;
  roll_ = 0;
  yaw_ = 0;
  lat_ = 0;
  lng_ = 0;
  alt_ = 0;
  speed_ = 0;
  barometer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelemetryPacket::~TelemetryPacket() {
  // @@protoc_insertion_point(destructor:uavforge.TelemetryPacket)
  SharedDtor();
}

void TelemetryPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelemetryPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelemetryPacket_descriptor_;
}

const TelemetryPacket& TelemetryPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TelemetryPacket_2eproto();
  return *default_instance_;
}

TelemetryPacket* TelemetryPacket::default_instance_ = NULL;

TelemetryPacket* TelemetryPacket::New() const {
  return new TelemetryPacket;
}

void TelemetryPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TelemetryPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(seqno_, yaw_);
  }
  ZR_(alt_, barometer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TelemetryPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.TelemetryPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seqNo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_accx;
        break;
      }

      // required float accx = 2;
      case 2: {
        if (tag == 21) {
         parse_accx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accx_)));
          set_has_accx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_accy;
        break;
      }

      // required float accy = 3;
      case 3: {
        if (tag == 29) {
         parse_accy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accy_)));
          set_has_accy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_accz;
        break;
      }

      // required float accz = 4;
      case 4: {
        if (tag == 37) {
         parse_accz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accz_)));
          set_has_accz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // required float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_roll;
        break;
      }

      // required float roll = 6;
      case 6: {
        if (tag == 53) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yaw;
        break;
      }

      // required float yaw = 7;
      case 7: {
        if (tag == 61) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // required double lat = 8;
      case 8: {
        if (tag == 65) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_lng;
        break;
      }

      // required double lng = 9;
      case 9: {
        if (tag == 73) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_alt;
        break;
      }

      // required float alt = 10;
      case 10: {
        if (tag == 85) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_speed;
        break;
      }

      // required float speed = 11;
      case 11: {
        if (tag == 93) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_barometer;
        break;
      }

      // required int32 barometer = 12;
      case 12: {
        if (tag == 96) {
         parse_barometer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barometer_)));
          set_has_barometer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.TelemetryPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.TelemetryPacket)
  return false;
#undef DO_
}

void TelemetryPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.TelemetryPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seqno(), output);
  }

  // required float accx = 2;
  if (has_accx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->accx(), output);
  }

  // required float accy = 3;
  if (has_accy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->accy(), output);
  }

  // required float accz = 4;
  if (has_accz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->accz(), output);
  }

  // required float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // required float roll = 6;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->roll(), output);
  }

  // required float yaw = 7;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw(), output);
  }

  // required double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // required double lng = 9;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lng(), output);
  }

  // required float alt = 10;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->alt(), output);
  }

  // required float speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed(), output);
  }

  // required int32 barometer = 12;
  if (has_barometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->barometer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.TelemetryPacket)
}

::google::protobuf::uint8* TelemetryPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.TelemetryPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seqno(), target);
  }

  // required float accx = 2;
  if (has_accx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->accx(), target);
  }

  // required float accy = 3;
  if (has_accy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->accy(), target);
  }

  // required float accz = 4;
  if (has_accz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->accz(), target);
  }

  // required float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // required float roll = 6;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->roll(), target);
  }

  // required float yaw = 7;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw(), target);
  }

  // required double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // required double lng = 9;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lng(), target);
  }

  // required float alt = 10;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->alt(), target);
  }

  // required float speed = 11;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->speed(), target);
  }

  // required int32 barometer = 12;
  if (has_barometer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->barometer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.TelemetryPacket)
  return target;
}

int TelemetryPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seqNo = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }

    // required float accx = 2;
    if (has_accx()) {
      total_size += 1 + 4;
    }

    // required float accy = 3;
    if (has_accy()) {
      total_size += 1 + 4;
    }

    // required float accz = 4;
    if (has_accz()) {
      total_size += 1 + 4;
    }

    // required float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float roll = 6;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float yaw = 7;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double lng = 9;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // required float alt = 10;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // required float speed = 11;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required int32 barometer = 12;
    if (has_barometer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barometer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TelemetryPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TelemetryPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TelemetryPacket::MergeFrom(const TelemetryPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_accx()) {
      set_accx(from.accx());
    }
    if (from.has_accy()) {
      set_accy(from.accy());
    }
    if (from.has_accz()) {
      set_accz(from.accz());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_barometer()) {
      set_barometer(from.barometer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TelemetryPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryPacket::CopyFrom(const TelemetryPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void TelemetryPacket::Swap(TelemetryPacket* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(accx_, other->accx_);
    std::swap(accy_, other->accy_);
    std::swap(accz_, other->accz_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(yaw_, other->yaw_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(alt_, other->alt_);
    std::swap(speed_, other->speed_);
    std::swap(barometer_, other->barometer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TelemetryPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelemetryPacket_descriptor_;
  metadata.reflection = TelemetryPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace uavforge

// @@protoc_insertion_point(global_scope)
