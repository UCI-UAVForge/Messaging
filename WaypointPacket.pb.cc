// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WaypointPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WaypointPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uavforge {

namespace {

const ::google::protobuf::Descriptor* WaypointPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaypointPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WaypointPacket_2eproto() {
  protobuf_AddDesc_WaypointPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WaypointPacket.proto");
  GOOGLE_CHECK(file != NULL);
  WaypointPacket_descriptor_ = file->message_type(0);
  static const int WaypointPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, speed_),
  };
  WaypointPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaypointPacket_descriptor_,
      WaypointPacket::default_instance_,
      WaypointPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaypointPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WaypointPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaypointPacket_descriptor_, &WaypointPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WaypointPacket_2eproto() {
  delete WaypointPacket::default_instance_;
  delete WaypointPacket_reflection_;
}

void protobuf_AddDesc_WaypointPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024WaypointPacket.proto\022\010uavforge\"U\n\016Wayp"
    "ointPacket\022\r\n\005seqNo\030\001 \002(\005\022\013\n\003lat\030\002 \002(\001\022\013"
    "\n\003lng\030\003 \002(\001\022\013\n\003alt\030\004 \002(\002\022\r\n\005speed\030\005 \002(\002", 119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WaypointPacket.proto", &protobuf_RegisterTypes);
  WaypointPacket::default_instance_ = new WaypointPacket();
  WaypointPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WaypointPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WaypointPacket_2eproto {
  StaticDescriptorInitializer_WaypointPacket_2eproto() {
    protobuf_AddDesc_WaypointPacket_2eproto();
  }
} static_descriptor_initializer_WaypointPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WaypointPacket::kSeqNoFieldNumber;
const int WaypointPacket::kLatFieldNumber;
const int WaypointPacket::kLngFieldNumber;
const int WaypointPacket::kAltFieldNumber;
const int WaypointPacket::kSpeedFieldNumber;
#endif  // !_MSC_VER

WaypointPacket::WaypointPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uavforge.WaypointPacket)
}

void WaypointPacket::InitAsDefaultInstance() {
}

WaypointPacket::WaypointPacket(const WaypointPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uavforge.WaypointPacket)
}

void WaypointPacket::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = 0;
  lat_ = 0;
  lng_ = 0;
  alt_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaypointPacket::~WaypointPacket() {
  // @@protoc_insertion_point(destructor:uavforge.WaypointPacket)
  SharedDtor();
}

void WaypointPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaypointPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaypointPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaypointPacket_descriptor_;
}

const WaypointPacket& WaypointPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WaypointPacket_2eproto();
  return *default_instance_;
}

WaypointPacket* WaypointPacket::default_instance_ = NULL;

WaypointPacket* WaypointPacket::New() const {
  return new WaypointPacket;
}

void WaypointPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WaypointPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lat_, speed_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaypointPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uavforge.WaypointPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seqNo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (tag == 17) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lng;
        break;
      }

      // required double lng = 3;
      case 3: {
        if (tag == 25) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_alt;
        break;
      }

      // required float alt = 4;
      case 4: {
        if (tag == 37) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // required float speed = 5;
      case 5: {
        if (tag == 45) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uavforge.WaypointPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uavforge.WaypointPacket)
  return false;
#undef DO_
}

void WaypointPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uavforge.WaypointPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seqno(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // required double lng = 3;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  // required float alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alt(), output);
  }

  // required float speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:uavforge.WaypointPacket)
}

::google::protobuf::uint8* WaypointPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uavforge.WaypointPacket)
  // required int32 seqNo = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seqno(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // required double lng = 3;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  // required float alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alt(), target);
  }

  // required float speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uavforge.WaypointPacket)
  return target;
}

int WaypointPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seqNo = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lng = 3;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // required float alt = 4;
    if (has_alt()) {
      total_size += 1 + 4;
    }

    // required float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaypointPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaypointPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaypointPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaypointPacket::MergeFrom(const WaypointPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaypointPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointPacket::CopyFrom(const WaypointPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void WaypointPacket::Swap(WaypointPacket* other) {
  if (other != this) {
    std::swap(seqno_, other->seqno_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(alt_, other->alt_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaypointPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaypointPacket_descriptor_;
  metadata.reflection = WaypointPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace uavforge

// @@protoc_insertion_point(global_scope)
